# Generated by Django 5.1.5 on 2025-02-05 13:17

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(max_length=50)),
                ('reg_num', models.CharField(max_length=100)),
                ('address', models.TextField(null=True)),
                ('status', models.CharField(choices=[('closed', 'closed'), ('active', 'active'), ('suspended', 'suspended')], max_length=50, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.city')),
            ],
        ),
        migrations.CreateModel(
            name='BusinessLicense',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=50)),
                ('issue_date', models.DateField(null=True)),
                ('expiration_date', models.DateField(null=True)),
                ('license_fee', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('status', models.CharField(choices=[('active', 'active'), ('expired', 'expired'), ('pending_renewal', 'pending_renewal')], max_length=50, null=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.business')),
            ],
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=300)),
                ('message', models.TextField(null=True)),
                ('display_img', models.BinaryField(null=True)),
                ('date_posted', models.DateTimeField(auto_now_add=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.city')),
            ],
        ),
        migrations.CreateModel(
            name='CitySection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('section', models.CharField(choices=[('low', 'low'), ('medium', 'medium'), ('high', 'high'), ('cbd', 'cbd')], max_length=50)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.city')),
            ],
        ),
        migrations.CreateModel(
            name='ParkingTicket',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('parking_lot_id', models.IntegerField()),
                ('vehicle_plate_number', models.CharField(max_length=20)),
                ('issued_at', models.DateTimeField(auto_now_add=True)),
                ('expiry_at', models.DateTimeField(null=True)),
                ('is_paid', models.BooleanField(default=False)),
                ('is_expired', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ParkingPayment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('paid_at', models.DateTimeField(null=True)),
                ('method', models.CharField(choices=[('cash', 'cash'), ('card', 'card'), ('mobile', 'mobile')], max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.parkingticket')),
            ],
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('area_sq_m', models.FloatField()),
                ('address', models.TextField()),
                ('value', models.FloatField()),
                ('property_type', models.CharField(max_length=50, null=True)),
                ('housing_status', models.CharField(choices=[('owned', 'owned'), ('rented', 'rented')], max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.city')),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.citysection')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PetLicensing',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pet_name', models.CharField(max_length=50)),
                ('species', models.CharField(max_length=50, null=True)),
                ('breed', models.CharField(max_length=50, null=True)),
                ('age', models.IntegerField()),
                ('registration_date', models.DateField()),
                ('expiration_date', models.DateField(null=True)),
                ('status', models.CharField(choices=[('active', 'active'), ('expired', 'expired'), ('pending_renewal', 'pending_renewal')], max_length=50)),
                ('fee', models.FloatField()),
                ('vaccination_status', models.CharField(choices=[('pending', 'pending'), ('vaccinated', 'vaccinated')], max_length=50)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.property')),
            ],
        ),
        migrations.CreateModel(
            name='IssueReport',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('category', models.CharField(max_length=50, null=True)),
                ('description', models.TextField(null=True)),
                ('status', models.CharField(choices=[('pending', 'pending'), ('resolved', 'resolved'), ('active', 'active')], max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.city')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('property', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='portal.property')),
            ],
        ),
        migrations.CreateModel(
            name='Tax',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('type', models.CharField(max_length=100)),
                ('rate', models.DecimalField(decimal_places=2, max_digits=10)),
                ('renewal_period', models.CharField(choices=[('daily', 'daily'), ('weekly', 'weekly'), ('monthly', 'monthly'), ('yearly', 'yearly')], max_length=50, null=True)),
                ('description', models.TextField(null=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.city')),
            ],
        ),
        migrations.AddField(
            model_name='property',
            name='tax',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.tax'),
        ),
        migrations.AddField(
            model_name='business',
            name='tax',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='portal.tax'),
        ),
        migrations.CreateModel(
            name='TaxPayer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('total_tax_due', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('last_payment_date', models.DateField(null=True)),
                ('business', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='portal.business')),
                ('property', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='portal.property')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TaxExemption',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('exemption_reason', models.TextField(null=True)),
                ('discount_rate', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('tax', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.tax')),
                ('taxpayer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.taxpayer')),
            ],
        ),
        migrations.CreateModel(
            name='TaxBill',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount_due', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('status', models.CharField(choices=[('pending', 'pending'), ('paid', 'paid'), ('overdue', 'overdue')], max_length=50, null=True)),
                ('due_date', models.DateTimeField(null=True)),
                ('tax', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.tax')),
                ('tax_payer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.taxpayer')),
            ],
        ),
        migrations.CreateModel(
            name='TaxPayment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(max_length=50, null=True)),
                ('payment_date', models.DateField()),
                ('receipt_number', models.TextField()),
                ('tax_bill', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.taxbill')),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('vehicle_plate_number', models.CharField(max_length=20, unique=True)),
                ('make', models.CharField(max_length=50, null=True)),
                ('model', models.CharField(max_length=50, null=True)),
                ('color', models.CharField(max_length=50, null=True)),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tax', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='portal.tax')),
            ],
        ),
        migrations.AddField(
            model_name='taxpayer',
            name='vehicle',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='portal.vehicle'),
        ),
        migrations.AddField(
            model_name='parkingticket',
            name='car',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.vehicle'),
        ),
        migrations.CreateModel(
            name='WaterBill',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('water_used', models.FloatField()),
                ('meter_number', models.IntegerField()),
                ('amount', models.FloatField()),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.property')),
            ],
        ),
        migrations.CreateModel(
            name='Debt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount_owed', models.FloatField()),
                ('amount_paid', models.FloatField()),
                ('due_date', models.DateTimeField()),
                ('status', models.CharField(choices=[('pending', 'pending'), ('overdue', 'overdue'), ('paid', 'paid')], default='pending', max_length=50)),
                ('last_payment_date', models.DateTimeField(null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('property', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='portal.property')),
                ('bill', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='portal.waterbill')),
            ],
        ),
        migrations.CreateModel(
            name='WaterMeter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('meter_num', models.IntegerField(unique=True)),
                ('current_reading', models.IntegerField()),
                ('type', models.CharField(max_length=50, null=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.property')),
            ],
        ),
        migrations.CreateModel(
            name='WaterUsage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('consumption', models.IntegerField()),
                ('date_recorded', models.DateTimeField()),
                ('meter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.watermeter')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='portal.property')),
            ],
        ),
    ]
